import React, { useState } from 'react';
import './App.css';
import AWS from 'aws-sdk';
import axios from 'axios'

function App() {
    const [counts, setCounts] = useState({ breakfast: 0, lunch: 0, dinner: 0 });
    const [roomNumber, setRoomNumber] = useState('');
    const [language, setLanguage] = useState('en');
    const [signatureUrl, setSignatureUrl] = useState('');

    // Translation object for supported languages with meal type emojis
    const translations = {
        en: {
            roomLabel: 'Room Number',
            languageLabel: 'Language',
            selectMeals: 'Select Meals',
            breakfast: '‚òÄÔ∏è Breakfast',
            lunch: 'üåû Lunch',
            dinner: 'üåô Dinner',
            signature: 'Signature',
            clearSignature: 'Clear Signature',
            submitOrder: 'Submit Order',
        },
        es: {
            roomLabel: 'N√∫mero de Habitaci√≥n',
            languageLabel: 'Idioma',
            selectMeals: 'Seleccionar Comidas',
            breakfast: '‚òÄÔ∏è Desayuno',
            lunch: 'üåû Almuerzo',
            dinner: 'üåô Cena',
            signature: 'Firma',
            clearSignature: 'Borrar Firma',
            submitOrder: 'Enviar Pedido',
        },
        zh: {
            roomLabel: 'ÊàøÈó¥Âè∑',
            languageLabel: 'ËØ≠Ë®Ä',
            selectMeals: 'ÈÄâÊã©È§êÁÇπ',
            breakfast: '‚òÄÔ∏è Êó©È§ê',
            lunch: 'üåû ÂçàÈ§ê',
            dinner: 'üåô ÊôöÈ§ê',
            signature: 'Á≠æÂêç',
            clearSignature: 'Ê∏ÖÈô§Á≠æÂêç',
            submitOrder: 'Êèê‰∫§ËÆ¢Âçï',
        },
        ru: {
            roomLabel: '–ù–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã',
            languageLabel: '–Ø–∑—ã–∫',
            selectMeals: '–í—ã–±—Ä–∞—Ç—å –±–ª—é–¥–∞',
            breakfast: '‚òÄÔ∏è –ó–∞–≤—Ç—Ä–∞–∫',
            lunch: 'üåû –û–±–µ–¥',
            dinner: 'üåô –£–∂–∏–Ω',
            signature: '–ü–æ–¥–ø–∏—Å—å',
            clearSignature: '–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å—å',
            submitOrder: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑',
        },
        bn: {
            roomLabel: '‡¶ï‡¶ï‡ßç‡¶∑ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞',
            languageLabel: '‡¶≠‡¶æ‡¶∑‡¶æ',
            selectMeals: '‡¶ñ‡¶æ‡¶¨‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®',
            breakfast: '‚òÄÔ∏è ‡¶™‡ßç‡¶∞‡¶æ‡¶§‡¶É‡¶∞‡¶æ‡¶∂',
            lunch: 'üåû ‡¶Æ‡¶ß‡ßç‡¶Ø‡¶æ‡¶π‡ßç‡¶®‡¶≠‡ßã‡¶ú‡¶®',
            dinner: 'üåô ‡¶∞‡¶æ‡¶§‡ßá‡¶∞ ‡¶ñ‡¶æ‡¶¨‡¶æ‡¶∞',
            signature: '‡¶∏‡ßç‡¶¨‡¶æ‡¶ï‡ßç‡¶∑‡¶∞',
            clearSignature: '‡¶∏‡ßç‡¶¨‡¶æ‡¶ï‡ßç‡¶∑‡¶∞ ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®',
            submitOrder: '‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶®',
        },
        ko: {
            roomLabel: 'Î∞© Î≤àÌò∏',
            languageLabel: 'Ïñ∏Ïñ¥',
            selectMeals: 'ÏãùÏÇ¨ ÏÑ†ÌÉù',
            breakfast: '‚òÄÔ∏è ÏïÑÏπ®',
            lunch: 'üåû Ï†êÏã¨',
            dinner: 'üåô Ï†ÄÎÖÅ',
            signature: 'ÏÑúÎ™Ö',
            clearSignature: 'ÏÑúÎ™Ö ÏßÄÏö∞Í∏∞',
            submitOrder: 'Ï£ºÎ¨∏ Ï†úÏ∂ú',
        },
        ht: {
            roomLabel: 'Nimewo chanm',
            languageLabel: 'Lang',
            selectMeals: 'Chwazi Repa',
            breakfast: '‚òÄÔ∏è Dejene',
            lunch: 'üåû Manje midi',
            dinner: 'üåô Manje asw√®',
            signature: 'Siyati',
            clearSignature: 'Efase Siyati',
            submitOrder: 'Voye l√≤d la',
        },
        ar: {
            roomLabel: 'ÿ±ŸÇŸÖ ÿßŸÑÿ∫ÿ±ŸÅÿ©',
            languageLabel: 'ÿßŸÑŸÑÿ∫ÿ©',
            selectMeals: 'ÿßÿÆÿ™ÿ± ÿßŸÑŸàÿ¨ÿ®ÿßÿ™',
            breakfast: '‚òÄÔ∏è ÿßŸÑÿ•ŸÅÿ∑ÿßÿ±',
            lunch: 'üåû ÿßŸÑÿ∫ÿØÿßÿ°',
            dinner: 'üåô ÿßŸÑÿπÿ¥ÿßÿ°',
            signature: 'ÿßŸÑÿ™ŸàŸÇŸäÿπ',
            clearSignature: 'ŸÖÿ≥ÿ≠ ÿßŸÑÿ™ŸàŸÇŸäÿπ',
            submitOrder: 'ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ∑ŸÑÿ®',
        },
        fr: {
            roomLabel: 'Num√©ro de chambre',
            languageLabel: 'Langue',
            selectMeals: 'S√©lectionnez les repas',
            breakfast: '‚òÄÔ∏è Petit d√©jeuner',
            lunch: 'üåû D√©jeuner',
            dinner: 'üåô D√Æner',
            signature: 'Signature',
            clearSignature: 'Effacer la signature',
            submitOrder: 'Envoyer la commande',
        },
        ur: {
            roomLabel: '⁄©ŸÖÿ±€í ⁄©ÿß ŸÜŸÖÿ®ÿ±',
            languageLabel: 'ÿ≤ÿ®ÿßŸÜ',
            selectMeals: '⁄©⁄æÿßŸÜ€í ⁄©ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ÿ±€å⁄∫',
            breakfast: '‚òÄÔ∏è ŸÜÿßÿ¥ÿ™€Å',
            lunch: 'üåû ÿØŸàŸæ€Åÿ± ⁄©ÿß ⁄©⁄æÿßŸÜÿß',
            dinner: 'üåô ÿ±ÿßÿ™ ⁄©ÿß ⁄©⁄æÿßŸÜÿß',
            signature: 'ÿØÿ≥ÿ™ÿÆÿ∑',
            clearSignature: 'ÿØÿ≥ÿ™ÿÆÿ∑ ÿµÿßŸÅ ⁄©ÿ±€å⁄∫',
            submitOrder: 'ÿ¢ÿ±⁄àÿ± ÿ¨ŸÖÿπ ⁄©ÿ±Ÿàÿßÿ¶€å⁄∫',
        },
    };

    const adjustCount = (meal, change) => {
        setCounts((prevCounts) => ({
            ...prevCounts,
            [meal]: Math.max(0, prevCounts[meal] + change),
        }));
    };

    const clearSignature = () => {
        const canvas = document.getElementById('signature-pad');
        const ctx = canvas.getContext('2d');
        ctx.clearRect(0, 0, canvas.width, canvas.height);
    };

    const submitOrder = async () => {
        if (!roomNumber || (counts.breakfast === 0 && counts.lunch === 0 && counts.dinner === 0)) {
            alert('Please enter all the details!');
            return;
        }

        const canvas = document.getElementById('signature-pad');
        const signatureDataUrl = canvas.toDataURL('image/png');
        const orderData = {
            roomNumber,
            language,
            meals: counts,
            // signatureUrl: await uploadSignatureToS3(signatureDataUrl),
            signS3url: 'testing url',
            created_at: new Date().toISOString()
        };

        console.log(orderData)
        const response = await axios.post('http://localhost:5000/api/submit-order', {
            data: orderData
        }).then((res) => {
            console.log('Order submitted -> ', res)
            alert(res.data.message);
        }).catch((err) => {
            console.log('Error Submitting order -> ', err)
            // alert(err.data.error);
        })


    };

    const uploadSignatureToS3 = async (signatureDataUrl) => {
        const s3 = new AWS.S3({
            accessKeyId: 'YOUR_ACCESS_KEY_ID',
            secretAccessKey: 'YOUR_SECRET_ACCESS_KEY',
            region: 'YOUR_AWS_REGION',
        });

        const base64Data = signatureDataUrl.replace(/^data:image\/\w+;base64,/, '');
        const buffer = new Buffer(base64Data, 'base64');
        const fileName = `signatures/${Date.now()}.png`;

        const params = {
            Bucket: 'your-s3-bucket-name',
            Key: fileName,
            Body: buffer,
            ContentEncoding: 'base64',
            ContentType: 'image/png',
        };

        try {
            const data = await s3.upload(params).promise();
            return data.Location;
        } catch (err) {
            console.error('Error uploading signature:', err);
            return '';
        }
    };

    const changeLanguage = (e) => {
        setLanguage(e.target.value);
    };

    return (
        <div className="container">
            <div className="header">
                <div className="room-input-wrapper">
                    <div className="room-input">
                        <label htmlFor="room">{translations[language].roomLabel}</label>
                        <input
                            type="number"
                            id="room"
                            name="room"
                            value={roomNumber}
                            onChange={(e) => setRoomNumber(e.target.value)}
                            placeholder={translations[language].roomLabel}
                            required
                        />
                    </div>
                    <div className="room-input">
                        <label htmlFor="language">{translations[language].languageLabel}</label>
                        <select id="language" name="language" value={language} onChange={changeLanguage}>
                            <option value="en">English</option>
                            <option value="es">Espa√±ol</option>
                            <option value="zh">‰∏≠Êñá</option>
                            <option value="ru">–†—É—Å—Å–∫–∏–π</option>
                            <option value="bn">‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ</option>
                            <option value="ko">ÌïúÍµ≠Ïñ¥</option>
                            <option value="ht">Krey√≤l Ayisyen</option>
                            <option value="ar">ÿßŸÑÿπÿ±ÿ®Ÿäÿ©</option>
                            <option value="fr">Fran√ßais</option>
                            <option value="ur">ÿßÿ±ÿØŸà</option>
                        </select>
                    </div>
                </div>
                <img
                    src="https://d161ew7sqkx7j0.cloudfront.net/public/images/logos/6698_2300_Childrens_Rescue_Fund_Logo_Final.png"
                    alt="Children's Rescue Fund Logo"
                    className="logo"
                />
            </div>

            <div className="main-content">
                <div className="order-section">
                    <h2 className="section-title">{translations[language].selectMeals}</h2>
                    {['breakfast', 'lunch', 'dinner'].map((meal) => (
                        <div key={meal} className="meal-counter">
                            <span>{translations[language][meal]}</span>
                            <div className="counter-controls">
                                <button className="counter-btn" onClick={() => adjustCount(meal, -1)}>-</button>
                                <span className="counter-display">{counts[meal]}</span>
                                <button className="counter-btn" onClick={() => adjustCount(meal, 1)}>+</button>
                            </div>
                        </div>
                    ))}
                </div>

                <div className="signature-section">
                    <h2 className="section-title">{translations[language].signature}</h2>
                    <canvas id="signature-pad" role="img" aria-label="Signature pad for signing"></canvas>
                    <button id="clear-sig" onClick={clearSignature}>
                        {translations[language].clearSignature}
                    </button>
                </div>
            </div>

            <button id="submit-btn" onClick={submitOrder}>
                {translations[language].submitOrder}
            </button>
        </div>
    );
}

export default App;
